@import 'export-layers.cocoascript'
@import 'export-states.cocoascript'


// todo: Allow to write in a custom folder with sandbox.js ?
// todo: Use Set instead of Array to prevent dublicated export ?


var pluginPath = ""

var pluginTitleNameText = "Replicate Selected"
var descriptionText = "Generates FramerJS layers for selected groups,\rrectangles and ovals. Supports @2x, @3x and\rothers with modifier variable."


var onRun = function(context) {
    pluginPath = context.scriptPath.substring(0, context.scriptPath.lastIndexOf("/"));
	var doc = context.document
	var selection = context.selection
	createExportWindow(context)
}


function createExportWindow(context){
	setScale(rememberRetina())
	var checkboxExportState = rememberState()
	
	var sa = rememberRelative()
	setAxisMode(sa);
	var selectedItemIndex = sa;
	
	var paddingLeft = 274;
	var columnWidth = 136;
	var smallFontSize = 9;
	
	var items = ['Artboard', 'Parent']
	var lightColor = [NSColor colorWithRed:0.6 green:0.6 blue:0.6 alpha:1];
	var semiWhiteColor = [NSColor colorWithRed:0.93 green:0.93 blue:0.93 alpha:1];
	var fieldColor = [NSColor colorWithSRGBRed:0.97 green:0.97 blue:0.97 alpha:1]
		
	var exportWindow = [[NSWindow alloc] init];
	[exportWindow setFrame:NSMakeRect(0, 0, 600, 320) display:false];
	[exportWindow setBackgroundColor:[NSColor whiteColor]];
	
	
	var imagePath = pluginPath + '/images/' + 'export' + isRetinaRequired() + '.png';
	var image = NSImage.alloc().initByReferencingFile(imagePath);
	var imageView = [[NSImageView alloc] initWithFrame:NSMakeRect(30, 60, 200, 200)];
	[imageView setImage: image];
	[[exportWindow contentView] addSubview:imageView];
	
	var commandText = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft-1, 235, columnWidth*2, 16)];
	[commandText setEditable:false];
	[commandText setBordered:false];
	[commandText setDrawsBackground:false];
	[commandText setFont:[NSFont boldSystemFontOfSize:15]];
	[commandText setStringValue:pluginTitleNameText];
	[[exportWindow contentView] addSubview:commandText];
	
	
	//All sizes will be multiply with this const. Type const name or a number instead!
    var description = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft-1, 186, columnWidth, 42)];
    [description setEditable:false];
    [description setBordered:false];
    [description setFont:[NSFont boldSystemFontOfSize:11]];
    [description setTextColor:lightColor];
    [description setDrawsBackground:false];
    [description setStringValue:descriptionText];
    [description sizeToFit];
    [[exportWindow contentView] addSubview:description];

	
	
	
	
	// field 1
	var titleRetina = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft, 156, columnWidth, 16)];
    [titleRetina setEditable:false];
    [titleRetina setBordered:false];
    [titleRetina setFont:[NSFont boldSystemFontOfSize:smallFontSize]];
    [titleRetina setTextColor:lightColor];
    [titleRetina setDrawsBackground:false];
    [titleRetina setStringValue:"Modifier"];
    [titleRetina sizeToFit];
    [[exportWindow contentView] addSubview:titleRetina];
    
	var retinaInput = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft, 130, columnWidth, 20)];
    [[retinaInput cell] setPlaceholderString:"Ex: \"retina\", \"2\", \"3\""];
	[retinaInput setFocusRingType:NSFocusRingTypeNone];
    [retinaInput setBordered:false];
    [retinaInput setBackgroundColor:fieldColor];
    [retinaInput setStringValue:getScale()];
    [[exportWindow contentView] addSubview:retinaInput];
    
    
    // field 2
	var titleRelative = [[NSTextField alloc] initWithFrame:NSMakeRect(paddingLeft + 150, 156, columnWidth, 16)];
    [titleRelative setEditable:false];
    [titleRelative setBordered:false];
    [titleRelative setFont:[NSFont boldSystemFontOfSize:smallFontSize]];
    [titleRelative setTextColor:lightColor];
    [titleRelative setDrawsBackground:false];
    [titleRelative setStringValue:"Relative to"];
    [titleRelative sizeToFit];
    [[exportWindow contentView] addSubview:titleRelative];
    
	var relativeDropdown = [[NSComboBox alloc] initWithFrame:NSMakeRect(paddingLeft + 150, 130-6+2, columnWidth, 26)];
    [relativeDropdown addItemsWithObjectValues:items];
    [relativeDropdown selectItemAtIndex:selectedItemIndex];
    [[exportWindow contentView] addSubview:relativeDropdown];
	[relativeDropdown becomeFirstResponder];
    [relativeDropdown setSelectable:false];

	
	
	// checkbox
	var exportStatesCheckbox = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft, 100-4, columnWidth * 2, 16)];
	[exportStatesCheckbox setButtonType:NSSwitchButton];
	[exportStatesCheckbox setTitle:"Export states from Artboards"];
	[exportStatesCheckbox setState:rememberState()];
	exportStatesCheckbox.setCOSJSTargetFunction(function(sender){
		checkboxExportState = checkboxExportState == 0 ? 1 : 0
	})
	[[exportWindow contentView] addSubview:exportStatesCheckbox];
	
	
	
	
	var buttonsBottomOffset = 40;
    
	var exportButton = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft-4, buttonsBottomOffset-20, 78, 50)];
	[exportButton setTitle:"Export"];
	[exportButton setBezelStyle:NSRoundedBezelStyle];
	[exportButton setKeyEquivalent:"\r"];
	   [exportButton setCOSJSTargetFunction:function(sender) {
	       [exportWindow orderOut:nil]
	       [NSApp stopModal]
		   axisMode = [relativeDropdown indexOfSelectedItem]
		   
		   var newScale = retinaInput.stringValue()
		   setScale(newScale)
		   studyRetina(newScale)
		   
		   studyState(checkboxExportState)
		   
		   studyRelative(axisMode)
		   setAxisMode(axisMode)
		   
	       if (checkboxExportState == 0) {
			   exportLayers(context)
		   }
		   else {
			   exportStates(context)
		   }
	   }];
	   [exportButton setAction:"callAction:"];
	[[exportWindow contentView] addSubview:exportButton];
    
    
	var cancelButton = [[NSButton alloc] initWithFrame:NSMakeRect(paddingLeft + 78-4, buttonsBottomOffset-20, 68, 50)];
	[cancelButton setTitle:"Cancel"];
	[cancelButton setKeyEquivalent:"\033"]
	[cancelButton setBezelStyle:NSRoundedBezelStyle];
		[cancelButton setCOSJSTargetFunction:function(sender) {
			[exportWindow orderOut:nil]
			[NSApp stopModal]
		}];
	[cancelButton setAction:"callAction:"]
	[[exportWindow contentView] addSubview:cancelButton];
    
    
    var helpButton = [[NSButton alloc] initWithFrame:NSMakeRect(556-30+6, 30, 32, 32)];
	[helpButton setBezelStyle:NSHelpButtonBezelStyle];
	[helpButton setTitle:nil];
	   [helpButton setCOSJSTargetFunction:function(sender) {
	       var url = [NSURL URLWithString:@"http://medium.com"];
		   [[NSWorkspace sharedWorkspace] openURL:url]
	   }];
	   [helpButton setAction:"callAction:"]
	[[exportWindow contentView] addSubview:helpButton];
    
    
	[exportWindow setDefaultButtonCell:[exportButton cell]];
	[NSApp runModalForWindow:exportWindow];
	
}

function isRetinaRequired() {
   return NSScreen.isOnRetinaScreen() ? "2x" : "";
}