@import 'framer-inventory.js'
@import 'framer-inventory-write.js'
@import 'framer-inventory-search.js'
@import 'framer-inventory-text.js'


var fileName = "/states.coffie"
var layerHasBeenExported = 0

var exportStates = function(context) {
	
	var doc = context.document
	var selectedLayer = nil
	var selection = context.selection
	var artboards = [[doc currentPage] artboards]
	var cp = [doc currentPage]
	
	var output = NSMutableArray.new()
	var outputStatesGlobal = NSMutableArray.new()
	
	// SUPPORTED LAYERS
	var howManyImages = 0
	var howManyShapes = 0
	// SOME OTHERS (THEY CAN BE EXPORTED AS GROUPS)
	var howManyOthers = 0

	if (selection.count() == 0) {
		[doc showMessage:inventoryNoLayersSelectedMessage]
		return
	}



	for (var i = 0; i < selection.count(); i++) {
		selectedLayer = [selection objectAtIndex: i]
		selectedLayerType = [selectedLayer className]
		
		if (selectedLayer.isKindOfClass(MSArtboardGroup)) {
			howManyOthers++
		}
		else if (selectedLayer.isKindOfClass(MSSliceLayer)) {
			howManyOthers++
		}
		else if (selectedLayer.isKindOfClass(MSShapeGroup)) {
			if (isExportableWithoutImage(selectedLayer)) {
				output = output.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createRetinaRectangle(selectedLayer, cp), nil))
				howManyShapes++
			}
			else {
				output = output.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createRetinaLayer(selectedLayer, cp), nil))
				howManyImages++
			}
		}
		else if (selectedLayer.isKindOfClass(MSLayerGroup)) {
			output = output.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createRetinaLayer(selectedLayer, cp), nil))
			howManyImages++
		}
		else {
			howManyOthers++
		}
		
		
		var currentState = nil
		var currentStateNumber = 1
		var outputStates = NSMutableArray.new()
		var prevState = ""
		var firstStateName = ""
		
		for (var a = 0; a < artboards.count(); a++) {
			currentArtboard = [artboards objectAtIndex: a]
			var nameToFind = selectedLayer.name()
			if (selectedLayer.isKindOfClass(MSSliceLayer)) { nameToFind = removePath(selectedLayer.name()) }
			
			var foundLayerOnCurrentArtboard = findNotSlicesTogetStates_inContainer(nameToFind, currentArtboard, selectedLayerType)
			if (foundLayerOnCurrentArtboard != nil && foundLayerOnCurrentArtboard.count() > 0) {
				if (outputStates.count() > 0) {
					var currentState = createRetinaState(foundLayerOnCurrentArtboard[0], cp)
					
					if (currentState != prevState) {
						currentStateNumber++
						outputStates = outputStates.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects("\t" + clearName(currentArtboard.name()) + currentState, nil))
						prevState = currentState
					}
				}
				else {
					var firstState = createRetinaState(foundLayerOnCurrentArtboard[0], cp)
					firstStateName = clearName(currentArtboard.name())
					outputStates = outputStates.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createStateTitle(selectedLayer), nil))
					outputStates = outputStates.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects("\t" + clearName(currentArtboard.name()) + firstState, nil))
					prevState = firstState
				}
			}
		}
		outputStates = outputStates.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createStateTitleEnd(), nil))
		if (firstStateName != "") {
			outputStates = outputStates.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(createStateSwitchInstant(selectedLayer, firstStateName), nil))
		}
		
		for (var s = 0; s < outputStates.count(); s++) {
			outputStatesGlobal.addObject([outputStates objectAtIndex: s])
		}
		outputStates = NSMutableArray.new()
		
	}
	
	
	if (howManyOthers < selection.count()) {
		var string = NSMutableString.new()
		for (var i = 0; i < output.count(); i++) { string += [output objectAtIndex: i] }
		string += ln()
		for (var i = 0; i < outputStatesGlobal.count(); i++) { string += [outputStatesGlobal objectAtIndex: i] }
		string += ln()

		framerInventoryOutput(string, fileName)
		[[NSPasteboard generalPasteboard] clearContents];
		[[NSPasteboard generalPasteboard] setString:string  forType:NSStringPboardType];
	
		var successMessage = inventorySuccessMessageParametricNumberedGetter(selection.count(), howManyImages, howManyShapes)
		[doc showMessage:successMessage]
	}
	else {
		[doc showMessage:inventoryBadTypesSelectedMessage]
	}

}