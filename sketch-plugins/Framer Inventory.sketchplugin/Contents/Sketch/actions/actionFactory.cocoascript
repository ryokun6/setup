@import 'actions/workers/action-replicate-layers.cocoascript'
@import 'actions/workers/action-generate-states.cocoascript'
@import 'actions/workers/action-simulate-keynote.cocoascript'
@import 'actions/workers/action-testing-environment.cocoascript'
@import 'actions/workers/action-settings.cocoascript'

@import 'inventory/classes/layer.cocoascript'
@import 'inventory/libs/pluginDefaults.js'
@import 'inventory/libs/search.js'

var presets = {
    myRetina: "retina",
	myMobile: 1,
	myMinimalExport: 1,
	myAutoplay: 0
}

var pluginDomain = "com.addleimb.framer-inventory.retina"
var userDefaults = initDefaults(pluginDomain, presets)

var currentDocument = nil
var usedStates = []

var pluginPath = ""

var pixelDensity = 1
var phoneModel = 0

var exportPageRequired = false
var exportPageName = "Export for Framer Inventory"


var chooseAction = function(context, actionIdentifier, testing) {
	pluginPath = context.scriptPath.substring(0, context.scriptPath.lastIndexOf("/"))
	
	if (showLog) { log("Current document is initialised") }
	FramerInventory.initCurrentDocument(context)

	if (testing) {
		if (showLog) { log("Starting Testing Environment...") }
		runTestingEnvironment(context)
	}
	else {
		if (actionIdentifier == 0) {
			if (showLog) { log("Starting Replicating Layers...") }
			runReplicateLayers(context)
		}
		else if (actionIdentifier == 1) {
			if (showLog) { log("Starting Analysing States...") }
			runGenerateStates(context)
		}
		else if (actionIdentifier == 2) {
			if (showLog) { log("Starting Simulating Keynote...") }
			runSimulateKeynote(context)
		}
		else if (actionIdentifier == 3) {
			if (showLog) { log("Starting Settings...") }
			runSettings(context)
		}
		else if (actionIdentifier == 4) {
			FramerInventory.showDoneMessage()
		}
		else {
			if (showLog) { log("ERROR: Action is undetermined") }
		}
	}
}




function FramerInventory () {}

FramerInventory.initCurrentDocument = function(context) {
	currentDocument = context.document
}

FramerInventory.getCurrentPage = function () {
	return [currentDocument currentPage]
}

FramerInventory.deselectLayers = function() {
	[[currentDocument currentPage] deselectAllLayers]
}

FramerInventory.addPage = function(oldPage) {
	var newPage = nil
	var pageExistsIndex = -1

	var pages = [currentDocument pages]
	for (var i = 0; i < pages.count(); i++) {
		if ([[pages objectAtIndex: i] name] == exportPageName) {
			pageExistsIndex = i
			break
		}
	}

	if (pageExistsIndex != -1) {
		newPage = [pages objectAtIndex: pageExistsIndex]
	}
	else {
	    newPage = currentDocument.addBlankPage();
	    newPage.setName(exportPageName);
	}

	currentDocument.setCurrentPage(oldPage);
    return newPage;
}


FramerInventory.cleanLayer = function(layer, page) {
	var predicate = NSPredicate.predicateWithFormat("name == %@ && className == %@", [layer name], [layer className])
	var deleteLayers = findLayersMatchingPredicate_inContainer_filterByType(predicate, page)

	for (var i = 0; i < deleteLayers.count(); i++) {
		if ([deleteLayers objectAtIndex: i] != nil) {
			[[deleteLayers objectAtIndex: i] removeFromParent]
		}
	}

	return
}


FramerInventory.cleanPage = function(page) {
	var exportableLayers = [page exportableLayers]
	
	for (var i = 0; i < exportableLayers.count(); i++) {
		[[exportableLayers objectAtIndex: i] removeFromParent]
	}
}

FramerInventory.findPageWithName = function(pageName) {
	var pages = [currentDocument pages]
	for (var p = 0; p < [pages count]; p++) {
		if ([[pages objectAtIndex:p] name] == pageName) { return [pages objectAtIndex:p] }
	}
	return nil
}



FramerInventory.removePage = function(pageName) {
	var oldPage = [currentDocument currentPage]
	
	var pages = [currentDocument pages]
	for (var i = 0; i < pages.count(); i++) {
		var page = [pages objectAtIndex: i]
		if ([page name] == pageName) {
			[currentDocument removePage:page]
		}
	}
	
	currentDocument.setCurrentPage(oldPage)
}


// breaks current selection
FramerInventory.selectAllLayersOnExportPage = function() {
	var oldPage = [currentDocument currentPage]
	var existingExportPage = nil
	
	var pages = [currentDocument pages]
	for (var i = 0; i < pages.count(); i++) {
		var page = [pages objectAtIndex: i]
		if ([page name] == exportPageName) {
			existingExportPage = page
			break
		}
	}
	
	if (existingExportPage != nil) {
		var layersOnPage = [existingExportPage layers]
		FramerInventory.deselectLayers()
		
		for (var i = 0; i < layersOnPage.count(); i++) {
			[[layersOnPage objectAtIndex:i] select:true byExpandingSelection:true]
		}
	}
	
	currentDocument.setCurrentPage(oldPage)
}




// selection based magic

FramerInventory.organiseSelection = function(userSelection) {
	var page = FramerInventory.getCurrentPage()
	var artboards = [page artboards]
	
	if ([[page artboards] firstObject] != nil) {
		var frame = [[[artboards firstObject] frame] size]
		FramerInventory.analyseMobile(frame.width)
	}
	
	var cleanedTypes = FramerInventory.cleanTypes(userSelection)
	
	
	var cleanedSelection = FramerInventory.cleanSelection(cleanedTypes)
	// if (showLog) { log("Cleaned selection: " + cleanedSelection.count() + " -> " + cleanedSelection) }
	
	var queue = FramerInventory.configureQueue(artboards, cleanedSelection)
	
	FramerInventory.restoreSelection(userSelection)
	
	var merged = FramerInventory.mergeQueue(queue)
	
	merged = FramerInventory.cleanDuplicates(merged)
	// if (showLog) { log("Duplicates cleaned: " + merged) }
	
	var newSelection = FramerInventory.composeSelection(merged, cleanedSelection)
	if (showLog) { log("Composed: " + newSelection) }
	
	return newSelection
}


FramerInventory.cleanTypes = function(userSelection) {
	var newSelection = NSMutableArray.new()
	
	for (var i = 0; i < userSelection.count(); i++) {
		var current = [userSelection objectAtIndex:i]
		var type = [current className]
		
		if (type == "MSArtboardGroup" || type == "MSSliceLayer") { ; }
		else {
			newSelection = newSelection.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(current, nil))
		}
	}
	
	return newSelection
}


// skip layers with duplicated names from selection
FramerInventory.cleanSelection = function(userSelection) {
	var newSelection = NSMutableArray.new()
	var duplicatedSelection = NSMutableArray.new()
	
	for (var i = 0; i < userSelection.count(); i++) {
		var current = [userSelection objectAtIndex:i]
		var alreadySelected = false
		
		for (var j = 0; j < i; j++) {
			var comparableCurrent = [userSelection objectAtIndex:j]
			
			if ([[current name] isEqualToString:[comparableCurrent name]]) {
				alreadySelected = true
				break
			}
		}
		
		if (!alreadySelected) {
			newSelection = newSelection.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(current, nil))
		}
		else {
			duplicatedSelection = duplicatedSelection.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects(current, nil))
		}
	}
	
	if (duplicatedSelection != nil && [duplicatedSelection count] > 0) {
		if (showLog) { log("Warning: user selection has " + [duplicatedSelection count] + " dublicated names")} 
	}
	
	return newSelection
}

// return an array based on each artboard layers hierarchy
FramerInventory.configureQueue = function(artboards, cleanedSelection) {
	var queue = []
	
	for (var i = 0; i < artboards.count(); i++) {
		[[currentDocument currentPage] deselectAllLayers]
		
		var currentArtboard = [artboards objectAtIndex:i]
		var artboardLayers = [currentArtboard layers]

		var allChildren = [currentArtboard children]
		var localQueue = []

		
		for (var j = 0; j < allChildren.count(); j++) {
			
			var child = [allChildren objectAtIndex: j]
			
			for (var s = 0; s < cleanedSelection.count(); s++) {
				var selectionLayer = [cleanedSelection objectAtIndex: s]
				
				if ([[child name] isEqualToString:[selectionLayer name]]) {
					localQueue.push([child name])
					break
				}
			}
		}
		
		if (localQueue != nil && localQueue.length > 0) {
			// if (showLog) { log("Added new queue: " + localQueue) }
			queue.push(localQueue)
		}
		
	}
	
	return queue
}


FramerInventory.composeSelection = function(layerNames, userSelection) {
	var composedSelection = NSMutableArray.new()
	
	for (var i = 0; i < layerNames.length; i++) {
		
		var layerType = nil
		for (var j = 0; j < [userSelection count]; j++) {
			var currentLayer = [userSelection objectAtIndex:j]
			
			if ([[currentLayer name] isEqualToString:layerNames[i]]) {
				layerType = [currentLayer className]
				break
			}
		}
		
		var namedLayersPredicate = NSPredicate.predicateWithFormat("name == %@ && className == %@", layerNames[i], layerType)
		var foundLayers = findLayersMatchingPredicate_inContainer_filterByType(namedLayersPredicate, FramerInventory.getCurrentPage())
		
		if (foundLayers != nil && [foundLayers count] != 0) {
			composedSelection = composedSelection.arrayByAddingObjectsFromArray(NSArray.arrayWithObjects([foundLayers firstObject], nil))
			continue
		}
	}
	
	if (composedSelection != nil && composedSelection.count() < 1) { return nil }
	return composedSelection
}


FramerInventory.cleanDuplicates = function(dirtySelection) {
	if (dirtySelection == nil) { return nil }
	var cleanSelection = []
	
	for (var i = 0; i < dirtySelection.length; i++) {
		var dirtyLayer = dirtySelection[i]
		
		if (cleanSelection == nil) {
			cleanSelection.push(dirtyLayer)
		}
		else {
			var alreadySelected = false
			
			for (var j = 0; j < cleanSelection.length; j++) {
				var cleanLayer = cleanSelection[j]
			
				if ([dirtyLayer isEqualToString:cleanLayer]) {
					alreadySelected = true
					break
				}
			}
			
			if (!alreadySelected) {
				cleanSelection.push(dirtyLayer)
			}
		}
		
	}
	
	return cleanSelection
}


FramerInventory.restoreSelection = function(initialSelection) {
	[[currentDocument currentPage] deselectAllLayers]
	for (var i = 0; i < initialSelection.count(); i++) {
		[[initialSelection objectAtIndex:i] select:true byExpandingSelection:true]
	}
}





// merging layers
FramerInventory.hasElem = function(elem, container) {
	if (container == nil) {
		if (showLog) { log("HasElem has an empty container")}
		return -1
	}
	
	for (var i = 0; i < container.length; i++) {
		if (elem == container[i]) { return i }
	}
	return -1
}


FramerInventory.merge = function(left, right) {
	if (left.length < 1) { return right }
	if (left.right < 1) { return left }

	var result = []
	var leftPointer = 0
	var rightPointer = 0
	
	for (var i = 0; i < left.length; i++) {
		var currentElem = left[i]
		
		var stopPoint = FramerInventory.hasElem(currentElem, right)
		
		// if (showLog) { log("it: " + i + " and stopPoint is " + stopPoint) }
		
		if (stopPoint != -1) {
			for (var f = leftPointer; f < i; f++) { result.push(left[f]) }
			for (var f = rightPointer; f < stopPoint; f++) { result.push(right[f]) }
			result.push(right[stopPoint])
			leftPointer = i + 1
			rightPointer = stopPoint + 1
		}
	}
	
	for (var f = leftPointer; f < left.length; f++) { result.push(left[f]) }
	for (var f = rightPointer; f < right.length; f++) { result.push(right[f]) }

	return result
}


FramerInventory.mergeQueue = function(container) {
	if (container == nil) {
		if (showLog) { log("Merge queue has an empty container")}
		return nil
	}
	if (container.legth == 1) { return container[0] }
	
	var temp = []
	for (var i = 0; i < container.length; i++) {
		temp = FramerInventory.merge(temp, container[i])
	}
	return temp
}







FramerInventory.returnDuplicatedArtboards = function(artboards) {
	
	for (var i = 0; i < artboards.count(); i++) {
		var current = [artboards objectAtIndex:i]
		
		for (var j = 0; j < i; j++) {
			var comparableCurrent = [artboards objectAtIndex:j]
			if ([current name] == [comparableCurrent name]) {
				return comparableCurrent
			}
		}
	}
	
	return nil
}





FramerInventory.addStateName = function(stateName) {
	if (usedStates != nil) {
		for (var i = 0; i < usedStates.length; i++) { if (usedStates[i] == stateName) { return } }
	}
	usedStates.push(stateName)
}

FramerInventory.getUsedStatesNames = function() {
	var page = FramerInventory.getCurrentPage()
	var artboards = [page artboards]
	var usedArtboardsNames = []
	
	for (var i = 0; i < artboards.count(); i++) {
		var currentArtboardName = [[artboards objectAtIndex: i] name]
		if (FramerInventory.isUsed(currentArtboardName)) { usedArtboardsNames.push(currentArtboardName) }
	}
	
	return usedArtboardsNames
}

FramerInventory.isUsed = function(artboardName) {
	if (usedStates == nil) { return false }
	
	for (var i = 0; i < usedStates.length; i++) {
		if (artboardName == usedStates[i]) { return true }
	}
	
	return false
}






FramerInventory.analyseMobile = function(artboardWidth) {
	FramerInventory.setRetinaValue(artboardWidth)
	FramerInventory.setPhoneValue(artboardWidth)
}

FramerInventory.setPhoneValue = function(artboardWidth) {
	if (userDefaults.myMobile == 0 || artboardWidth == nil) { phoneModel = 0 }
	else if (artboardWidth == 320 || artboardWidth == 640) { phoneModel = 1 }
	else if (artboardWidth == 375 || artboardWidth == 750) { phoneModel = 2 }
	else if (artboardWidth == 414 || artboardWidth == 1242) { phoneModel = 3 }
	else { phoneModel = 0 }
}

FramerInventory.getPhoneValue = function() {
	return phoneModel
}

FramerInventory.setRetinaValue = function(artboardWidth) {
	if (userDefaults.myMobile == 0 || artboardWidth == nil) { pixelDensity = 1 }
	else if (artboardWidth == 640 || artboardWidth == 750 || artboardWidth == 1242) { pixelDensity = 1 }
	else if (artboardWidth == 320 || artboardWidth == 375) { pixelDensity = 2 }
	else if (artboardWidth == 414) { pixelDensity = 3 }
	else {
		if (showLog) { log("Pixel density is undetermined") }
		pixelDensity = 1
	}
}

FramerInventory.getRetinaValue = function() {
	return pixelDensity
}




FramerInventory.requireExportPage = function() {
	exportPageRequired = true
}

FramerInventory.isExportPageRequired = function() {
	return exportPageRequired
}

FramerInventory.showDoneMessage = function() {
	if (FramerInventory.isExportPageRequired()) {
		[currentDocument showMessage:"Done. Export assets from " + exportPageName + " page"]
		// FramerInventory.selectAllLayersOnExportPage()
	}
	else {
		[currentDocument showMessage:"Done"]
		FramerInventory.removePage(exportPageName)
	}
	if (showLog) { log("Completed") }
}
