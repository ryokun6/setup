var onRun = function(context) {
  
	var selection = context.selection
	if(selection.count() == 0) {
		var app = NSApplication.sharedApplication();
    		app.displayDialog_withTitle("Draw a circle on the canvas, select it, then run the plugin again.", "Select a circle!")
		return
	}

	var doc = context.document,
	sliceColorsString = doc.askForUserInput_initialValue("Enter color values for pie slices.", "#161032,#FAFF81,#FFC53A,#E06D06,#B26700");
	if(sliceColorsString == nil) return

	var layer = [selection firstObject],
	sliceColors = sliceColorsString.split(","),
	numSlices = sliceColors.length,
	diameter = layer.frame().width(),
	dash = diameter*22/7/numSlices,
	gap = diameter*5,
	rotateBy = 360/numSlices,
	slice, borders, border, color;

	for(var i = 0; i<numSlices; i++) {
		color = hexToColor(sliceColors[i])
		slice = layer.duplicate()
		disableFills(slice)
		borders = slice.style().borders();
		borders.addNewStylePart();
		border = slice.style().border();
		border.setColor(MSColor.colorWithNSColor(color));
		border.setPosition(1); //inside
		border.setThickness(diameter/2);
		slice.style().borderOptions().setDashPattern([dash, gap])
		slice.setRotation(rotateBy*i)
		slice.setName(sliceColors[i])
		slice.select_byExpandingSelection(true, true)
	}

	layer.setHasClippingMask(1)
	var groupAction = doc.actionsController().actionWithName("MSGroupAction");
	if(groupAction.validate()) groupAction.group(nil)

	var pie = selection.firstObject().parentGroup()
	pie.setName(numSlices + " Slices Pie Chart")

	function disableFills(aLayer) {
		var fills = aLayer.style().fills()
		var loop = fills.array().objectEnumerator()
		while(existingFill = loop.nextObject()) {
			existingFill.setIsEnabled(false)
		}
	}

	function hexToColor(hex, alpha) {
		var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex),
			red = parseInt(result[1], 16) / 255,
			green = parseInt(result[2], 16) / 255,
			blue = parseInt(result[3], 16) / 255,
			alpha = (typeof alpha !== 'undefined') ? alpha : 1;
		return [NSColor colorWithCalibratedRed:red green:green blue:blue alpha:alpha]
	}
}
